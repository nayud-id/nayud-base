// Template only â€” do NOT put real secrets here.
// Copy this file to `config/secure/secrets.zig` (gitignored) and fill in values locally.
// Never commit `secrets.zig`.
// For any diagnostics, use redaction utilities in src/security/mod.zig and never print raw values.

pub const Secrets = struct {
    // Aerospike client authentication
    aerospike_user: []const u8,
    aerospike_password: []const u8, // real value must live only in secrets.zig

    // Optional TLS material (file paths); leave empty if not using TLS yet
    tls_ca_file: []const u8 = "",
    tls_cert_file: []const u8 = "",
    tls_key_file: []const u8 = "",

    // Optional: namespace and cluster identifiers used by your app
    namespace: []const u8 = "",
    cluster_name: []const u8 = "",

    /// Example constructor with placeholder values. Replace in your local secrets.zig copy.
    pub fn example() Secrets {
        return .{
            .aerospike_user = "example_user",
            .aerospike_password = "example_password",
            .tls_ca_file = "",
            .tls_cert_file = "",
            .tls_key_file = "",
            .namespace = "",
            .cluster_name = "",
        };
    }

    /// Guard against accidental printing. Keep this method as a reminder that
    /// secrets must never be formatted or logged.
    pub fn toStringRedacted(_: Secrets) []const u8 {
        return "Secrets(user=***, password=***, tls=***)";
    }
};

// Integration notes:
// - Real file path: config/secure/secrets.zig (kept out of VCS via config/secure/.gitignore)
// - When producing any logs, ensure values are redacted via src/security/mod.zig
// - Consider loading pieces from env for local dev; keep the single source of truth here